---
name: Build and Deploy Mobius

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  group: build-and-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and Build
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v5.0.0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.work'
          cache: true
          cache-dependency-path: |
            go.work.sum
            mobius-server/go.sum
            mobius-cli/go.sum
            mobius-client/go.sum
            mobius-cocoon/go.sum
            shared/go.sum

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: mobius-web/package-lock.json

      - name: Sync workspace and download dependencies
        shell: bash
        run: |
          set -euo pipefail
          go work sync
          # Use parallel downloads on Windows to speed up module fetching
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            export GOPROXY="https://proxy.golang.org,direct"
            export GOSUMDB="sum.golang.org"
            export GOMAXPROCS=4
          fi
          (cd mobius-server && go mod download)
          (cd mobius-cli && go mod download)
          (cd mobius-client && go mod download)
          (cd mobius-cocoon && go mod download)
          (cd shared && go mod download)

      - name: Install frontend dependencies
        shell: bash
        run: |
          cd mobius-web
          npm ci

      - name: Build frontend
        shell: bash
        run: |
          cd mobius-web
          npm run build

      - name: Run frontend tests
        shell: bash
        run: |
          cd mobius-web
          npm test

      - name: Run Go tests (all modules)
        shell: bash
        run: |
          set -euo pipefail
          echo "Running Go tests..."
          # Windows-specific optimizations
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            export GOMAXPROCS=4
            export GOCACHE="$(go env GOCACHE)"
          fi
          # Test with minimal output, only show results for packages with actual tests
          go test -short -count=1 ./mobius-server/... ./mobius-cli/... \
            ./mobius-client/... ./mobius-cocoon/... ./shared/... | \
            grep -v "\[no test files\]" || echo "Tests completed (no test failures)"

      - name: Build binaries sanity (server and CLI)
        shell: bash
        run: |
          set -euo pipefail
          # Copy frontend build to server
          mkdir -p mobius-server/static
          cp -r mobius-web/build/* mobius-server/static/ || \
            echo "No frontend build to copy"
          # Windows-specific build optimizations
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            export GOMAXPROCS=4
            export CGO_ENABLED=0
          fi
          (cd mobius-server && go build ./cmd/api-server)
          (cd mobius-cli && go build ./cmd/mobiuscli)

  # Build Docker Images
  build:
    needs: test
    permissions:
      contents: write      # For release asset uploads and SBOM attachment
      packages: write
      id-token: write      # For Sigstore OIDC signing
      attestations: write  # For SBOM attestations
    strategy:
      fail-fast: false      # Don't cancel other builds if one fails
      max-parallel: 1       # Reduce to 1 to give more resources to each build
      matrix:
        component: [server, cli, client, cocoon]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5.0.0

      - name: Show build context info
        shell: bash
        run: |
          echo "Building component: ${{ matrix.component }}"
          echo "Available CPU cores: $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 'unknown')"
          echo "Available memory: $(free -h 2>/dev/null || echo 'Memory info not available')"
          echo "Disk space: $(df -h . 2>/dev/null || echo 'Disk info not available')"

      - name: Normalize image name to lowercase (GHCR requirement)
        id: imagename
        shell: bash
        run: |
          set -euo pipefail
          lower=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          echo "lower=${lower}" >> "$GITHUB_OUTPUT"

      - name: Set up QEMU (for multi-arch builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Show Go build context (CLI only)
        if: matrix.component == 'cli'
        working-directory: ./mobius-${{ matrix.component }}
        shell: bash
        run: |
          echo "=== Go build context for mobius-${{ matrix.component }} ==="
          go version
          echo "Go cache directory: $(go env GOCACHE)"
          echo "Go module cache: $(go env GOMODCACHE)"
          echo "Module dependencies:"
          go list -m all | head -20 2>/dev/null || go list -m all | sed 20q
          echo "Direct dependencies count: $(go list -m all | wc -l)"
          echo "=== End build context ==="

      - name: Pre-build Go modules cache (CLI only)
        if: matrix.component == 'cli'
        working-directory: ./mobius-${{ matrix.component }}
        shell: bash
        run: |
          echo "Pre-downloading Go modules..."
          if command -v time >/dev/null 2>&1; then
            time go mod download -x
          else
            go mod download -x
          fi
          echo "Module download complete"

      - name: Log in to Container Registry
        uses: docker/login-action@v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for ${{ matrix.component }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: >-
            ${{ env.REGISTRY }}/${{ steps.imagename.outputs.lower }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push ${{ matrix.component }} Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./mobius-${{ matrix.component }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Add verbose output for CLI builds
          build-args: |
            ${{ matrix.component == 'cli' && 'VERBOSE=1' || '' }}
      - name: Generate SBOM (Syft)
        uses: anchore/sbom-action@v0
        with:
          image: >-
            ${{ env.REGISTRY }}/${{ steps.imagename.outputs.lower }}-${{ matrix.component }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: sbom-${{ matrix.component }}.spdx.json
          upload-artifact: false
          upload-release-assets: false

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.component }}
          path: sbom-${{ matrix.component }}.spdx.json

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.4'
      - name: Sign image (cosign keyless)
        env:
          COSIGN_EXPERIMENTAL: '1'
        run: |
          set -euo pipefail
          IMAGE="${{ env.REGISTRY }}/${{ steps.imagename.outputs.lower }}-${{ matrix.component }}@${{ steps.build.outputs.digest }}"
          # Retry signing up to 3 times in case of token expiration
          for i in {1..3}; do
            if cosign sign --yes "$IMAGE"; then
              echo "Successfully signed image on attempt $i"
              break
            else
              echo "Signing attempt $i failed, retrying..."
              sleep 10
            fi
          done

  # Create Release
  release:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release'
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v5.0.0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.work'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: mobius-web/package-lock.json

      - name: Build frontend
        run: |
          cd mobius-web
          npm ci
          npm run build

      - name: Copy frontend to server
        run: |
          mkdir -p mobius-server/static
          cp -r mobius-web/build/* mobius-server/static/

      - name: Build server release binaries
        run: |
          cd mobius-server
          GOOS=linux GOARCH=amd64 go build -o mobius-api-linux-amd64 ./cmd/api-server
          GOOS=linux GOARCH=arm64 go build -o mobius-api-linux-arm64 ./cmd/api-server
          GOOS=darwin GOARCH=amd64 go build -o mobius-api-darwin-amd64 ./cmd/api-server
          GOOS=darwin GOARCH=arm64 go build -o mobius-api-darwin-arm64 ./cmd/api-server
          GOOS=windows GOARCH=amd64 go build -o mobius-api-windows-amd64.exe ./cmd/api-server

      - name: Build CLI release binaries
        run: |
          cd mobius-cli
          GOOS=linux GOARCH=amd64 go build -o mobiuscli-linux-amd64 ./cmd/mobiuscli
          GOOS=linux GOARCH=arm64 go build -o mobiuscli-linux-arm64 ./cmd/mobiuscli
          GOOS=darwin GOARCH=amd64 go build -o mobiuscli-darwin-amd64 ./cmd/mobiuscli
          GOOS=darwin GOARCH=arm64 go build -o mobiuscli-darwin-arm64 ./cmd/mobiuscli
          GOOS=windows GOARCH=amd64 go build -o mobiuscli-windows-amd64.exe ./cmd/mobiuscli

      - name: Download SBOM artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: sbom-*
          merge-multiple: true

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            mobius-server/mobius-api-*
            mobius-cli/mobiuscli-*
            sbom-*.spdx.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
