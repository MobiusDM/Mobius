name: Check critical vulnerabilities in released GitHub Package images

on:
  workflow_dispatch:
  pull_request:
  schedule:
    - cron: "0 6 * * *"

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id}}
  cancel-in-progress: true

defaults:
  run:
    # fail-fast using bash -eo pipefail. See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference
    shell: bash

permissions:
  contents: read

jobs:
  build-and-check:
    runs-on: ubuntu-22.04
    permissions:
      packages: read
    steps:
 

      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3

      - name: Set up Go
        uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version-file: "backend/go.mod"

      - name: Get last 5 minor releases
        id: get_latest_releases
        run: |
          echo "MOBIUS_LATEST_RELEASES=$(cd backend && go run ./tools/github-releases --last-minor-releases 5)" >> $GITHUB_OUTPUT

      - name: Pull container images
        run: |
          RELEASES="${{ steps.get_latest_releases.outputs.MOBIUS_LATEST_RELEASES }}"
          for version in $RELEASES; do
            docker pull ghcr.io/notawar/mobius:$version
          done

      - name: List mobius VEX files
        id: generate_mobius_vex_files
        run: |
          VEX_FILES=$(ls -1 ./security/vex/mobius/ | while IFS= read -r line; do echo "./security/vex/mobius/$line"; done | tr '\n' ',' | sed 's/.$//')
          echo $VEX_FILES
          echo "MOBIUS_VEX_FILES=$VEX_FILES" >> $GITHUB_OUTPUT

      # We use the trivy command and not the github action because it doesn't support loading
      # VEX files yet and looks like we can't run the action on multiple images.
      - name: Run trivy vulnerability scanner on ghcr.io/notawar/mobius images
        env:
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db
          TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db
        run: |
          mkdir trivy-download
          cd trivy-download
          curl -L https://github.com/aquasecurity/trivy/releases/download/v0.61.0/trivy_0.61.0_Linux-64bit.tar.gz --output trivy_0.61.0_Linux-64bit.tar.gz
          tar -xf trivy_0.61.0_Linux-64bit.tar.gz
          mv trivy ..
          cd ..
          chmod +x ./trivy
          RELEASES="${{ steps.get_latest_releases.outputs.MOBIUS_LATEST_RELEASES }}"
          for version in $RELEASES; do
            ./trivy image \
              --exit-code=1 \
              --pkg-types=os,library \
              --severity=CRITICAL \
              --vex="${{ steps.generate_mobius_vex_files.outputs.MOBIUS_VEX_FILES }}" \
              ghcr.io/notawar/mobius:$version
          done

      - name: List mobiuscli VEX files
        id: generate_mobiuscli_vex_files
        run: |
          VEX_FILES=$(ls -1 ./security/vex/mobiuscli/ | while IFS= read -r line; do echo "./security/vex/mobiuscli/$line"; done | tr '\n' ',' | sed 's/.$//')
          echo $VEX_FILES
          echo "MOBIUSCTL_VEX_FILES=$VEX_FILES" >> $GITHUB_OUTPUT

      # We use the trivy command and not the github action because it doesn't support loading VEX files yet.
      - name: Run trivy vulnerability scanner on latest released ghcr.io/notawar/mobiuscli image
        env:
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db
          TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db
        run: |
          ./trivy image \
            --exit-code=1 \
            --pkg-types=os,library \
            --severity=CRITICAL \
            --vex="${{ steps.generate_mobiuscli_vex_files.outputs.MOBIUSCTL_VEX_FILES }}" \
            ghcr.io/notawar/mobiuscli:latest
