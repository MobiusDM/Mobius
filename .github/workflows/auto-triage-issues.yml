---
name: Auto-triage Issues

on:
  issues:
    types:
      - opened
      - edited

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id}}
  cancel-in-progress: true

defaults:
  run:
    # fail-fast using bash -eo pipefail.
    # See https://docs.github.com/en/actions/using-workflows/
    # workflow-syntax-for-github-actions  # exit-codes-and-error-action-preference
    shell: bash

permissions:
  contents: read
  issues: write

jobs:
  auto-triage:
    runs-on: ubuntu-latest
    if: >
      github.event.action == 'opened' ||
      (github.event.action == 'edited' && github.event.changes.title != null)

    steps:
      - name: Auto-triage issue
        # v7.0.1
        uses: actions/github-script@60a0d83039c74a4adc46de96a5d85e9bdf4c7a32
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const issue = context.payload.issue;

            console.log(`Processing issue #${number}: ${issue.title}`);

            // Determine issue type based on title and content
            const title = issue.title.toLowerCase();
            const body = issue.body || '';

            let labelsToAdd = [];
            let assigneesToAdd = [];

            // Analyze issue type and apply appropriate labels
            if (title.includes('[bug]') || title.includes('bug:')) {
              console.log('Detected bug report');
              labelsToAdd.push('bug');

              // Check for component-specific labels
              if (body.includes('- [x] Mobius Server') ||
                  body.includes('mobius server')) {
                labelsToAdd.push('component:server');
              }
              if (body.includes('- [x] Mobius Web Interface') ||
                  body.includes('web interface')) {
                labelsToAdd.push('component:web');
              }
              if (body.includes('- [x] Mobius CLI') ||
                  body.includes('mobiuscli')) {
                labelsToAdd.push('component:cli');
              }
              if (body.includes('- [x] Device Management') ||
                  body.includes('mdm')) {
                labelsToAdd.push('component:mdm');
              }
              if (body.includes('- [x] API') || body.includes('api')) {
                labelsToAdd.push('component:api');
              }

            } else if (title.includes('[feature]') ||
                       title.includes('feature:')) {
              console.log('Detected feature request');
              labelsToAdd.push('enhancement');

              // Check priority indicators
              if (body.includes('- [x] Critical') ||
                  title.includes('critical')) {
                labelsToAdd.push('priority:critical');
              } else if (body.includes('- [x] High') ||
                         title.includes('urgent')) {
                labelsToAdd.push('priority:high');
              } else if (body.includes('- [x] Medium')) {
                labelsToAdd.push('priority:medium');
              } else if (body.includes('- [x] Low')) {
                labelsToAdd.push('priority:low');
              }

            } else if (title.includes('release qa:')) {
              console.log('Detected release QA issue');
              labelsToAdd.push('release', 'qa');
              // Release QA issues already have assignees in their template

            } else if (body.includes('- [x] Security concern')) {
              console.log('Detected security issue');
              labelsToAdd.push('security');

            } else if (body.includes('- [x] Performance issue')) {
              console.log('Detected performance issue');
              labelsToAdd.push('performance');

            } else if (body.includes('- [x] Documentation')) {
              console.log('Detected documentation issue');
              labelsToAdd.push('documentation');
            }

            // Always add needs-triage if not already present
            if (!issue.labels.some(label => label.name === 'needs-triage')) {
              labelsToAdd.push('needs-triage');
            }

            // Remove duplicates
            labelsToAdd = [...new Set(labelsToAdd)];

            // Apply labels if any were determined
            if (labelsToAdd.length > 0) {
              console.log(`Adding labels: ${labelsToAdd.join(', ')}`);
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: number,
                labels: labelsToAdd
              });
            }

            // Add assignees if any were determined
            if (assigneesToAdd.length > 0) {
              console.log(`Adding assignees: ${assigneesToAdd.join(', ')}`);
              await github.rest.issues.addAssignees({
                owner,
                repo,
                issue_number: number,
                assignees: assigneesToAdd
              });
            }

            // Add helpful comment for first-time contributors
            const author = issue.user.login;
            const { data: authorIssues } = await github.rest.issues
              .listForRepo({
                owner,
                repo,
                creator: author,
                state: 'all',
                per_page: 2
              });

            if (authorIssues.length === 1 && authorIssues[0].number === number) {
              console.log('First-time contributor detected');
              const welcomeMessage = [
                'ðŸ‘‹ Thanks for opening your first issue in the Mobius',
                'repository!',
                '',
                'A maintainer will review your issue and respond within a',
                'few days. In the meantime, please:',
                '- Make sure you\'ve provided all the requested information',
                '  in the template',
                '- Check if there are any similar existing issues',
                '- Feel free to join our discussions for questions or',
                '  general feedback',
                '',
                'Welcome to the Mobius community! ðŸŽ‰'
              ].join('\n');

              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: welcomeMessage
              });
            }

            console.log('Auto-triage completed');
