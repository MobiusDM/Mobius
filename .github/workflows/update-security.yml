name: Update Security Documentation

on:
  schedule:
    # Run monthly on the 1st at 2 AM UTC
    - cron: '0 2 1 * *'
  workflow_dispatch:
    # Allow manual triggering
  push:
    branches:
      - main
    paths:
      - '.github/workflows/update-security.yml'
      - 'SECURITY.md'

# Prevent concurrent runs
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  security-events: read

jobs:
  update-security-md:
    name: Update SECURITY.md
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Get current date
        id: date
        run: echo "current_date=$(date -I)" >> $GITHUB_OUTPUT

      - name: Get latest release version
        id: version
        run: |
          # Get latest release tag or default to 1.0.0
          LATEST_VERSION=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' 2>/dev/null || echo "1.0.0")
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Count security vulnerabilities
        id: security_count
        run: |
          # Count open security advisories
          SECURITY_COUNT=$(gh api /repos/${{ github.repository }}/security-advisories --jq 'length' 2>/dev/null || echo "0")
          echo "security_advisories=$SECURITY_COUNT" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for security updates needed
        id: security_check
        run: |
          # Check if dependencies need security updates
          if [ -f package.json ]; then
            if npm audit --audit-level=moderate --json > audit_result.json 2>audit_error.log; then
              VULNERABILITIES=$(cat audit_result.json | jq '.vulnerabilities | length')
              echo "npm_vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
            else
              echo "npm_vulnerabilities=error" >> $GITHUB_OUTPUT
              echo "npm audit failed:" >&2
              cat audit_error.log >&2
            fi
          else
            echo "npm_vulnerabilities=skipped" >> $GITHUB_OUTPUT
          fi

          # Check Go vulnerabilities if available
          if command -v govulncheck &> /dev/null; then
            govulncheck ./... > govuln_result.txt 2>&1 || true
            GO_ISSUES=$(grep -c "Found" govuln_result.txt || echo "0")
          else
            GO_ISSUES="0"
          fi
          echo "go_vulnerabilities=$GO_ISSUES" >> $GITHUB_OUTPUT

      - name: Update SECURITY.md timestamps and version
        run: |
          # Update the last updated date
          sed -i "s/\*\*Last Updated\*\*:.*/\*\*Last Updated\*\*: ${{ steps.date.outputs.current_date }}/" SECURITY.md

          # Update security policy version (increment patch version)
          CURRENT_VERSION=$(grep "Security Policy Version" SECURITY.md | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' || echo "1.0.0")
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          sed -i "s/\*\*Security Policy Version\*\*:.*/\*\*Security Policy Version\*\*: $NEW_VERSION/" SECURITY.md

          # Update supported versions table with latest release
          LATEST_VERSION="${{ steps.version.outputs.latest_version }}"
          if [[ "$LATEST_VERSION" != "1.0.0" ]]; then
            # Update the supported versions table
            sed -i "/| Version | Supported/,/| < / {
              /| 1\.x\.x |/ s/| 1\.x\.x |/| $LATEST_VERSION |/
            }" SECURITY.md
          fi

      - name: Validate SECURITY.md format
        run: |
          # Check that required sections exist
          REQUIRED_SECTIONS=(
            "  # # Supported Versions"
            "  # # Reporting a Vulnerability"
            "  # # Security Features"
            "  # # Security Best Practices"
            "  # # Vulnerability Management"
            "  # # Security Contacts"
          )

          for section in "${REQUIRED_SECTIONS[@]}"; do
            if ! grep -q "$section" SECURITY.md; then
              echo "❌ Missing required section: $section"
              exit 1
            fi
          done

          echo "✅ All required sections found in SECURITY.md"

          # Check for placeholder content that needs updating
          if grep -q "security@mobius.local" SECURITY.md; then
            echo "⚠️  Warning: Update security email contact"
          fi

          # Validate markdown format
          if command -v markdownlint &> /dev/null; then
            markdownlint SECURITY.md || echo "⚠️  Markdown formatting issues detected"
          fi

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet SECURITY.md; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Create security status summary
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          cat > security_summary.md << EOF
          ## Security Documentation Update Summary

          **Date**: ${{ steps.date.outputs.current_date }}
          **Latest Version**: ${{ steps.version.outputs.latest_version }}

          #  # # Security Status
          - Open Security Advisories: ${{ steps.security_count.outputs.security_advisories }}
          - NPM Vulnerabilities: ${{ steps.security_check.outputs.npm_vulnerabilities }}
          - Go Vulnerabilities: ${{ steps.security_check.outputs.go_vulnerabilities }}

          #  # # Changes Made
          - Updated last modified timestamp
          - Incremented security policy version
          - Refreshed supported versions information

          EOF

          echo "📋 Security summary created"

      - name: Commit and push changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add SECURITY.md
          if [ -f security_summary.md ]; then
            git add security_summary.md
          fi

          git commit -m "docs: update SECURITY.md - automated update for ${{ steps.date.outputs.current_date }}" \
                     -m "- Updated timestamps and version information" \
                     -m "- Refreshed security status and supported versions" \
                     -m "- Automated by update-security workflow"

          git push

      - name: Create issue for security attention (if needed)
        if: steps.security_check.outputs.npm_vulnerabilities != '0' || steps.security_check.outputs.go_vulnerabilities != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const npmVulns = ${{ steps.security_check.outputs.npm_vulnerabilities }};
            const goVulns = ${{ steps.security_check.outputs.go_vulnerabilities }};

            if (npmVulns > 0 || goVulns > 0) {
              const title = `🔒 Security vulnerabilities detected - ${new Date().toISOString().split('T')[0]}`;
              const body = `  # # Security Alert

              Automated security scan has detected vulnerabilities that require attention:

              - **NPM Vulnerabilities**: ${npmVulns}
              - **Go Vulnerabilities**: ${goVulns}

              #  # # Recommended Actions
              1. Review and update vulnerable dependencies
              2. Run security scans: \`npm audit fix\` and \`govulncheck\`
              3. Test updated dependencies
              4. Update SECURITY.md if necessary

              #  # # Resources
              - [NPM Audit Documentation](https://docs.npmjs.com/cli/v8/commands/npm-audit)
              - [Go Vulnerability Check](https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck)

              ---
              *This issue was automatically created by the update-security workflow.*`;

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'automated']
              });
            }

  lint-security-md:
    name: Lint SECURITY.md
    runs-on: ubuntu-latest
    needs: update-security-md
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0

      - name: Setup markdownlint
        run: |
          npm install -g markdownlint-cli

      - name: Lint SECURITY.md
        run: |
          markdownlint SECURITY.md --config .markdownlint.json || true

      - name: Check security email placeholder
        run: |
          if grep -q "security@mobius.local" SECURITY.md; then
            echo "::warning::SECURITY.md contains placeholder email address. Consider updating with actual security contact."
          fi

      - name: Validate security section completeness
        run: |
          python3 << 'EOF'
          import re

          with open('SECURITY.md', 'r') as f:
              content = f.read()

          # Check for essential security information
          checks = [
              (r'  # # Supported Versions', 'Supported versions section'),
              (r'  # # Reporting a Vulnerability', 'Vulnerability reporting section'),
              (r'security@[\w.-]+', 'Security contact email'),
              (r'  # # Security Features', 'Security features documentation'),
              (r'HTTPS.*TLS', 'HTTPS/TLS security mention'),
              (r'JWT.*Authentication', 'JWT authentication mention'),
              (r'Rate Limiting', 'Rate limiting security measure'),
          ]

          missing = []
          for pattern, description in checks:
              if not re.search(pattern, content, re.IGNORECASE):
                  missing.append(description)

          if missing:
              print("⚠️  Missing or incomplete security information:")
              for item in missing:
                  print(f"  - {item}")
          else:
              print("✅ Security documentation appears complete")
          EOF