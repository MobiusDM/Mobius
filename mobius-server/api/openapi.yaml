openapi: 3.1.0
info:
  title: Mobius MDM API
  description: |
    Comprehensive API for the Mobius Mobile Device Management platform.

    This API provides complete control over device management, policy enforcement,
    application distribution, and system monitoring in a self-hosted environment.
  version: 1.0.0
  contact:
    name: Mobius MDM
    url: https://github.com/NotAwar/Mobius
  license:
    name: Proprietary

servers:
- url: https://api.mobius.local/api/v1
  description: Production server
- url: http://localhost:8080/api/v1
  description: Development server

security:
- BearerAuth: []
- ApiKeyAuth: []

paths:
  # Authentication & Authorization
  /auth/login:
    post:
      tags: [ Authentication ]
      summary: User login
      description: Authenticate user and return JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ email, password ]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  expires_at:
                    type: string
                    format: date-time
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # License Management
  /license/status:
    get:
      tags: [ License ]
      summary: Get license status
      description: Retrieve current license information and usage
      responses:
        '200':
          description: License status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseInfo'

  /license:
    put:
      tags: [ License ]
      summary: Apply license
      description: Apply or update license key (admin only)
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ key ]
              properties:
                key:
                  type: string
                  description: License key
      responses:
        '200':
          description: License applied successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'

  # Device Management
  /devices:
    get:
      tags: [ Devices ]
      summary: List devices
      description: Get list of enrolled devices with filtering and pagination
      parameters:
      - name: limit
        in: query
        schema:
          type: integer
          default: 50
          maximum: 500
      - name: offset
        in: query
        schema:
          type: integer
          default: 0
      - name: platform
        in: query
        schema:
          type: string
          enum: [ windows, macos, linux, ios, android ]
      - name: status
        in: query
        schema:
          type: string
          enum: [ online, offline, enrolled, pending ]
      responses:
        '200':
          description: Devices retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  devices:
                    type: array
                    items:
                      $ref: '#/components/schemas/Device'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer

    post:
      tags: [ Devices ]
      summary: Enroll device
      description: Enroll a new device into management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceEnrollment'
      responses:
        '201':
          description: Device enrolled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/BadRequest'

  /devices/{deviceId}:
    get:
      tags: [ Devices ]
      summary: Get device details
      parameters:
      - name: deviceId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Device details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [ Devices ]
      summary: Unenroll device
      parameters:
      - name: deviceId
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Device unenrolled successfully
        '404':
          $ref: '#/components/responses/NotFound'

  # Policy Management
  /policies:
    get:
      tags: [ Policies ]
      summary: List policies
      responses:
        '200':
          description: Policies retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Policy'

    post:
      tags: [ Policies ]
      summary: Create policy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyCreate'
      responses:
        '201':
          description: Policy created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'

  /policies/{policyId}:
    get:
      tags: [ Policies ]
      summary: Get policy details
      parameters:
      - name: policyId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Policy details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'

    put:
      tags: [ Policies ]
      summary: Update policy
      parameters:
      - name: policyId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyUpdate'
      responses:
        '200':
          description: Policy updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'

  # Application Management
  /applications:
    get:
      tags: [ Applications ]
      summary: List applications
      responses:
        '200':
          description: Applications retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'

    post:
      tags: [ Applications ]
      summary: Add application
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [ name, version, platform, package ]
              properties:
                name:
                  type: string
                version:
                  type: string
                platform:
                  type: string
                  enum: [ windows, macos, linux, ios, android ]
                package:
                  type: string
                  format: binary
      responses:
        '201':
          description: Application added successfully

  # System Monitoring
  /health:
    get:
      tags: [ System ]
      summary: Health check
      description: Check system health and status
      security: []
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ healthy, degraded, unhealthy ]
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                  components:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                          enum: [ up, down, unknown ]
                        message:
                          type: string

  /metrics:
    get:
      tags: [ System ]
      summary: System metrics
      description: Get system metrics in Prometheus format
      responses:
        '200':
          description: Metrics retrieved
          content:
            text/plain:
              schema:
                type: string

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [ admin, operator, viewer ]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    LicenseInfo:
      type: object
      properties:
        valid:
          type: boolean
        tier:
          type: string
          enum: [ community, professional, enterprise ]
        device_limit:
          type: integer
        devices_enrolled:
          type: integer
        expires_at:
          type: string
          format: date-time
        features:
          type: array
          items:
            type: string

    Device:
      type: object
      properties:
        id:
          type: string
        uuid:
          type: string
        hostname:
          type: string
        platform:
          type: string
          enum: [ windows, macos, linux, ios, android ]
        os_version:
          type: string
        last_seen:
          type: string
          format: date-time
        status:
          type: string
          enum: [ online, offline, enrolled, pending ]
        enrolled_at:
          type: string
          format: date-time
        labels:
          type: object
          additionalProperties:
            type: string

    DeviceEnrollment:
      type: object
      required: [ uuid, hostname, platform ]
      properties:
        uuid:
          type: string
        hostname:
          type: string
        platform:
          type: string
          enum: [ windows, macos, linux, ios, android ]
        os_version:
          type: string
        enrollment_secret:
          type: string

    Policy:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        platform:
          type: string
          enum: [ windows, macos, linux, ios, android, all ]
        enabled:
          type: boolean
        configuration:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PolicyCreate:
      type: object
      required: [ name, platform, configuration ]
      properties:
        name:
          type: string
        description:
          type: string
        platform:
          type: string
          enum: [ windows, macos, linux, ios, android, all ]
        configuration:
          type: object

    PolicyUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        configuration:
          type: object

    Application:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        version:
          type: string
        platform:
          type: string
          enum: [ windows, macos, linux, ios, android ]
        size:
          type: integer
        checksum:
          type: string
        created_at:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: integer
        details:
          type: object

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

tags:
- name: Authentication
  description: User authentication and authorization
- name: License
  description: License management and validation
- name: Devices
  description: Device enrollment and management
- name: Policies
  description: Policy creation and deployment
- name: Applications
  description: Application management and distribution
- name: System
  description: System health and monitoring
