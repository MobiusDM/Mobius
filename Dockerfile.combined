# Multi-stage build for Combined Mobius Server + CLI
FROM golang:1.24.4-alpine AS builder

# Install dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go.work files for multi-module workspace
COPY go.work go.work.sum ./

# Copy shared module
COPY shared/ ./shared/

# Copy server module
COPY mobius-server/ ./mobius-server/

# Copy CLI module  
COPY mobius-cli/ ./mobius-cli/

# Build the server
WORKDIR /app/mobius-server
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o mobius ./cmd/mobius

# Build the CLI
WORKDIR /app/mobius-cli
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o mobiuscli ./cmd/mobiuscli

# Final stage
FROM alpine:3.20

# Install ca-certificates for HTTPS requests and add non-root user
RUN apk --no-cache add ca-certificates && \
    addgroup -S app && adduser -S -G app app

WORKDIR /app

# Copy both binaries
COPY --from=builder /app/mobius-server/mobius .
COPY --from=builder /app/mobius-cli/mobiuscli .

# Create a startup script
RUN echo '#!/bin/sh' > start.sh && \
    echo 'if [ "$1" = "server" ]; then' >> start.sh && \
    echo '  exec ./mobius "$@"' >> start.sh && \
    echo 'elif [ "$1" = "cli" ]; then' >> start.sh && \
    echo '  shift' >> start.sh && \
    echo '  exec ./mobiuscli "$@"' >> start.sh && \
    echo 'else' >> start.sh && \
    echo '  echo "Usage: $0 {server|cli} [args...]"' >> start.sh && \
    echo '  echo "  server - Start Mobius Server"' >> start.sh && \
    echo '  echo "  cli    - Run Mobius CLI"' >> start.sh && \
    echo '  exit 1' >> start.sh && \
    echo 'fi' >> start.sh && \
    chmod +x start.sh

# Change ownership to app user
RUN chown -R app:app .

# Switch to non-root user
USER app

# Expose the server port
EXPOSE 8080

# Default to running the server
CMD ["./start.sh", "server"]
