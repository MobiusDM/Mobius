# Simplified Makefile for Single Developer - GitHub-centric workflow

.PHONY: help dev dev-core dev-full build test clean setup github-build github-push

# Default development profile
PROFILE ?= core
GITHUB_REGISTRY := ghcr.io
GITHUB_USER := $(shell git config --get remote.origin.url | sed 's/.*github\.com[:/]\([^/]*\).*/\1/')
GITHUB_REPO := $(shell git config --get remote.origin.url | sed 's/.*github\.com[:/][^/]*\/\([^.]*\).*/\1/')
IMAGE_NAME := $(GITHUB_REGISTRY)/$(GITHUB_USER)/$(GITHUB_REPO)

help: ## Show this help message
	@echo "Mobius Development Commands (GitHub-centric):"
	@echo ""
	@echo "Quick Start:"
	@echo "  make setup         - Initial setup (dependencies, database)"
	@echo "  make dev           - Start development environment (core profile)"
	@echo "  make dev-full      - Start full development environment"
	@echo ""
	@echo "Development:"
	@echo "  make build         - Build application locally"
	@echo "  make test          - Run tests"
	@echo "  make clean         - Clean build artifacts"
	@echo ""
	@echo "GitHub Integration:"
	@echo "  make github-build  - Build Docker images for GitHub registry"
	@echo "  make github-push   - Push images to GitHub Container Registry"
	@echo "  make github-release - Create GitHub release"
	@echo ""
	@echo "Profiles:"
	@echo "  core       - Backend + Frontend + Database only"
	@echo "  full       - Everything (current full setup)"
	@echo "  enterprise - Core + Enterprise features"

setup: ## Initial setup for development
	@echo "🚀 Setting up Mobius development environment..."
	@echo "📦 Installing dependencies..."
	yarn install
	@echo "🐳 Starting database..."
	docker-compose -f docker-compose.dev.yml up -d mysql redis
	@echo "📊 Running database migrations..."
	go run ./cmd/mobius migrate
	@echo "🔧 Setting up GitHub integration..."
	@echo "   Registry: $(IMAGE_NAME)"
	@echo "✅ Setup complete! Run 'make dev' to start developing."

dev: ## Start core development environment
	@echo "🚀 Starting Mobius (Core Profile)"
	@echo "Services: Backend + Frontend + Database"
	docker-compose -f docker-compose.dev.yml up mobius-server mobius-frontend mysql redis

dev-core: dev ## Alias for core development

dev-full: ## Start full development environment
	@echo "🚀 Starting Mobius (Full Profile)"
	@echo "Services: Everything"
	docker-compose -f docker-compose.dev.yml up

dev-enterprise: ## Start enterprise development environment
	@echo "🚀 Starting Mobius (Enterprise Profile)"
	@echo "Services: Core + Enterprise features"
	docker-compose -f docker-compose.dev.yml up mobius-server mobius-frontend mysql redis

build: ## Build the application locally
	@echo "🔨 Building Mobius..."
	go build -o build/mobius ./cmd/mobius
	cd frontend && npm run build

test: ## Run tests
	@echo "🧪 Running tests..."
	go test ./...
	cd frontend && npm test

github-build: ## Build Docker images for GitHub Container Registry
	@echo "🐳 Building Docker images for GitHub..."
	@echo "   Backend: $(IMAGE_NAME):latest"
	@echo "   Frontend: $(IMAGE_NAME)-frontend:latest"
	docker build -t $(IMAGE_NAME):latest .
	docker build -t $(IMAGE_NAME)-frontend:latest ./frontend

github-push: github-build ## Push images to GitHub Container Registry
	@echo "📦 Pushing to GitHub Container Registry..."
	@echo "   Make sure you're logged in: docker login ghcr.io"
	docker push $(IMAGE_NAME):latest
	docker push $(IMAGE_NAME)-frontend:latest

github-release: ## Create GitHub release with built binaries
	@echo "🚀 Creating GitHub release..."
	@echo "   Building cross-platform binaries..."
	GOOS=linux GOARCH=amd64 go build -o build/mobius-linux-amd64 ./cmd/mobius
	GOOS=darwin GOARCH=amd64 go build -o build/mobius-darwin-amd64 ./cmd/mobius
	GOOS=darwin GOARCH=arm64 go build -o build/mobius-darwin-arm64 ./cmd/mobius
	GOOS=windows GOARCH=amd64 go build -o build/mobius-windows-amd64.exe ./cmd/mobius
	@echo "   Binaries built in ./build/"
	@echo "   Create release manually on GitHub and upload binaries"

github-login: ## Login to GitHub Container Registry
	@echo "🔐 Logging into GitHub Container Registry..."
	@echo "   You'll need a GitHub Personal Access Token with packages:write scope"
	docker login ghcr.io

clean: ## Clean build artifacts
	@echo "🧹 Cleaning..."
	rm -rf build/
	rm -rf frontend/build/
	rm -rf node_modules/
	docker-compose -f docker-compose.dev.yml down --volumes

# Production deployment using GitHub images
deploy-prod: ## Deploy using GitHub Container Registry images
	@echo "🚀 Deploying production with GitHub images..."
	@echo "   Using images: $(IMAGE_NAME):latest"
	docker-compose -f docker-compose.prod.yml up -d

# Include original Makefile for advanced commands (optional)
# -include Makefile
