---
# Mobius MDM Platform - Simplified Architecture
# This docker-compose.yml provides the core services for the Mobius MDM platform

services:
  # Core database for device, policy, and user data
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: mobius
      POSTGRES_USER: mobius
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mobius-dev-password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mobius"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-mobius-dev-password}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mobius API Server
  mobius-api:
    build:
      context: ./mobius-server
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database configuration
      DATABASE_URL: postgres://mobius:${POSTGRES_PASSWORD:-mobius-dev-password}@postgres:5432/mobius?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-mobius-dev-password}@redis:6379/0
      
      # Server configuration
      HTTP_ADDR: ":8080"
      LOG_LEVEL: ${LOG_LEVEL:-info}
      JWT_SECRET: ${JWT_SECRET:-mobius-dev-jwt-secret-change-in-production}
      
      # License configuration
      LICENSE_KEY: ${LICENSE_KEY:-community-license}
      
      # Feature flags
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      ENABLE_CORS: ${ENABLE_CORS:-true}
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - app-storage:/app/storage

  # Mobius CLI (for management tasks)
  mobius-cli:
    build:
      context: ./mobius-cli
      dockerfile: Dockerfile
    profiles: ["cli"]
    depends_on:
      mobius-api:
        condition: service_healthy
    environment:
      MOBIUS_API_URL: http://mobius-api:8080
      MOBIUS_API_TOKEN: ${MOBIUS_API_TOKEN:-}
    volumes:
      - ./:/workspace
    working_dir: /workspace
    entrypoint: ["sh"]

  # Development tools and monitoring
  prometheus:
    image: prom/prometheus:latest
    profiles: ["monitoring"]
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    profiles: ["monitoring"]
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deployments/monitoring/grafana:/etc/grafana/provisioning

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  app-storage:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Development and testing setup
# Use these commands:
#
# Start core services:
#   docker-compose up -d postgres redis mobius-api
#
# Start with monitoring:
#   docker-compose --profile monitoring up -d
#
# Use CLI tools:
#   docker-compose --profile cli run --rm mobius-cli
#
# View logs:
#   docker-compose logs -f mobius-api
#
# Stop all services:
#   docker-compose down -v
